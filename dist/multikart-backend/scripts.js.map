{"version":3,"sources":["threex-arpatternfile.js","OrbitControls.js"],"names":[],"mappings":"AAAA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA,yBAAyB,0BAA0B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,4BAA4B,oBAAoB;AAChD;AACA,iBAAiB,sBAAsB;AACvC,kBAAkB,qBAAqB;;AAEvC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,6EAA6E,mBAAmB;AAChG;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAE;AACF;AACA;;CClIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,8BAA8B;AAC9B;;AAEA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB;;AAExB;AACA;AACA,4BAA4B;;AAE5B;AACA;AACA,wBAAwB;AACxB,8BAA8B;;AAE9B;AACA;AACA;AACA,cAAc;;AAEd;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,cAAc;AACd;;AAEA;;AAEA,oBAAoB;;;AAGpB;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,qBAAqB;AACrB;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,GAAG;;AAEH;AACA;AACA;;AAEA,GAAG;;AAEH;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,kCAAkC,QAAQ;AAC1C;;AAEA;AACA,mCAAmC,QAAQ;;AAE3C;;AAEA;;AAEA,GAAG;AACH,iCAAiC,QAAQ;;AAEzC;;AAEA;;AAEA,GAAG;AACH,gCAAgC,QAAQ;;AAExC;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;AACA;;AAEA;;AAEA;;AAEA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,2BAA2B;;AAE3B;;AAEA,GAAG,2BAA2B;;AAE9B;;AAEA;;AAEA;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;;AAEA;;AAEA;;AAEA,kCAAkC,QAAQ;AAC1C,gCAAgC,QAAQ;AACxC,+BAA+B,QAAQ;;AAEvC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,kCAAkC,QAAQ;;AAE1C;;AAEA;AACA,oCAAoC,QAAQ;;AAE5C;;AAEA;AACA;;AAEA;AACA,kCAAkC,QAAQ;;AAE1C;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,QAAQ;;AAEzC;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,kCAAkC,QAAQ;;AAE1C;AACA;;AAEA;;AAEA;;AAEA;AACA,oCAAoC,QAAQ;AAC5C,yCAAyC,QAAQ;;AAEjD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,kCAAkC,QAAQ;AAC1C,wCAAwC,QAAQ;;AAEhD;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,KAAK;;AAEL;;AAEA;;AAEA;AACA;;AAEA;AACA,iCAAiC,QAAQ;AACzC,sCAAsC,QAAQ;;AAE9C;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,kCAAkC,QAAQ;;AAE1C;AACA;;AAEA,sEAAsE,wBAAwB,EAAE;AAChG;AACA;AACA,2EAA2E;;AAE3E;;AAEA;AACA;AACA;;AAEA;;AAEA,iF","file":"scripts.js","sourcesContent":["var THREEx = THREEx || {}\n\nTHREEx.ArPatternFile = {}\n\nTHREEx.ArPatternFile.toCanvas = function(patternFileString, onComplete){\n\tconsole.assert(false, 'not yet implemented')\n}\n\n//////////////////////////////////////////////////////////////////////////////\n//\t\tfunction to encode image\n//////////////////////////////////////////////////////////////////////////////\n\nTHREEx.ArPatternFile.encodeImageURL = function(imageURL, onComplete){\n\tvar image = new Image;\n\timage.onload = function(){\n\t\tvar patternFileString = THREEx.ArPatternFile.encodeImage(image)\n\t\tonComplete(patternFileString)\n\t}\n\timage.src = imageURL;\n}\n\nTHREEx.ArPatternFile.encodeImage = function(image){\n\t// copy image on canvas\n\tvar canvas = document.createElement('canvas');\n\tvar context = canvas.getContext('2d')\n\tcanvas.width = 16;\n\tcanvas.height = 16;\n\n\t// document.body.appendChild(canvas)\n\t// canvas.style.width = '200px'\n\n\n\tvar patternFileString = ''\n\tfor(var orientation = 0; orientation > -2*Math.PI; orientation -= Math.PI/2){\n\t\t// draw on canvas - honor orientation\n\t\tcontext.save();\n \t\tcontext.clearRect(0,0,canvas.width,canvas.height);\n\t\tcontext.translate(canvas.width/2,canvas.height/2);\n\t\tcontext.rotate(orientation);\n\t\tcontext.drawImage(image, -canvas.width/2,-canvas.height/2, canvas.width, canvas.height);\n\t\tcontext.restore();\n\n\t\t// get imageData\n\t\tvar imageData = context.getImageData(0, 0, canvas.width, canvas.height)\n\n\t\t// generate the patternFileString for this orientation\n\t\tif( orientation !== 0 )\tpatternFileString += '\\n'\n\t\t// NOTE bgr order and not rgb!!! so from 2 to 0\n\t\tfor(var channelOffset = 2; channelOffset >= 0; channelOffset--){\n\t\t\t// console.log('channelOffset', channelOffset)\n\t\t\tfor(var y = 0; y < imageData.height; y++){\n\t\t\t\tfor(var x = 0; x < imageData.width; x++){\n\n\t\t\t\t\tif( x !== 0 ) patternFileString += ' '\n\n\t\t\t\t\tvar offset = (y*imageData.width*4) + (x * 4) + channelOffset\n\t\t\t\t\tvar value = imageData.data[offset]\n\n\t\t\t\t\tpatternFileString += String(value).padStart(3);\n\t\t\t\t}\n\t\t\t\tpatternFileString += '\\n'\n\t\t\t}\n\t\t}\n\t}\n\n\treturn patternFileString\n}\n\n//////////////////////////////////////////////////////////////////////////////\n//\t\ttrigger download\n//////////////////////////////////////////////////////////////////////////////\n\nTHREEx.ArPatternFile.triggerDownload =  function(patternFileString, fileName = 'pattern-marker.patt'){\n\t// tech from https://stackoverflow.com/questions/3665115/create-a-file-in-memory-for-user-to-download-not-through-server\n\tvar domElement = window.document.createElement('a');\n\tdomElement.href = window.URL.createObjectURL(new Blob([patternFileString], {type: 'text/plain'}));\n\tdomElement.download = fileName;\n\tdocument.body.appendChild(domElement)\n\tdomElement.click();\n\tdocument.body.removeChild(domElement)\n}\n\nTHREEx.ArPatternFile.buildFullMarker =  function(innerImageURL, pattRatio, size, color, onComplete){\n\tvar whiteMargin = 0.1\n\tvar blackMargin = (1 - 2 * whiteMargin) * ((1-pattRatio)/2)\n\t// var blackMargin = 0.2\n\n\tvar innerMargin = whiteMargin + blackMargin\n\n\tvar canvas = document.createElement('canvas');\n\tvar context = canvas.getContext('2d')\n\tcanvas.width = canvas.height = size\n\n\tcontext.fillStyle = 'white';\n\tcontext.fillRect(0,0,canvas.width, canvas.height)\n\n\t// copy image on canvas\n\tcontext.fillStyle = color;\n\tcontext.fillRect(\n\t\twhiteMargin * canvas.width,\n\t\twhiteMargin * canvas.height,\n\t\tcanvas.width * (1-2*whiteMargin),\n\t\tcanvas.height * (1-2*whiteMargin)\n\t);\n\n\t// clear the area for innerImage (in case of transparent image)\n\tcontext.fillStyle = 'white';\n\tcontext.fillRect(\n\t\tinnerMargin * canvas.width,\n\t\tinnerMargin * canvas.height,\n\t\tcanvas.width * (1-2*innerMargin),\n\t\tcanvas.height * (1-2*innerMargin)\n\t);\n\n\n\t// display innerImage in the middle\n\tvar innerImage = document.createElement('img')\n\tinnerImage.addEventListener('load', function(){\n\t\t// draw innerImage\n\t\tcontext.drawImage(innerImage,\n\t\t\tinnerMargin * canvas.width,\n\t\t\tinnerMargin * canvas.height,\n\t\t\tcanvas.width * (1-2*innerMargin),\n\t\t\tcanvas.height * (1-2*innerMargin)\n\t\t);\n\n\t\tvar imageUrl = canvas.toDataURL()\n\t\tonComplete(imageUrl)\n\t})\n\tinnerImage.src = innerImageURL\n}\n","/**\n * @author qiao / https://github.com/qiao\n * @author mrdoob / http://mrdoob.com\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author erich666 / http://erichaines.com\n * @author mrflix / http://felixniklas.de\n * \n * released under MIT License (MIT)\n */\n/*global THREE, console */\n\n// This set of controls performs orbiting, dollying (zooming), and panning. It maintains\n// the \"up\" direction as +Y, unlike the TrackballControls. Touch on tablet and phones is\n// supported.\n//\n//    Orbit - left mouse / touch: one finger move\n//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\n//    Pan - right mouse, or arrow keys / touch: three finter swipe\n//\n// This is a drop-in replacement for (most) TrackballControls used in examples.\n// That is, include this js file and wherever you see:\n//    \tcontrols = new THREE.TrackballControls( camera );\n//      controls.target.z = 150;\n// Simple substitute \"OrbitControls\" and the control should work as-is.\n\nTHREE.OrbitControls = function ( object, domElement, localElement ) {\n\n\tthis.object = object;\n\tthis.domElement = ( domElement !== undefined ) ? domElement : document;\n\tthis.localElement = ( localElement !== undefined ) ? localElement : document;\n\n\t// API\n\n\t// Set to false to disable this control\n\tthis.enabled = true;\n\n\t// \"target\" sets the location of focus, where the control orbits around\n\t// and where it pans with respect to.\n\tthis.target = new THREE.Vector3();\n\t// center is old, deprecated; use \"target\" instead\n\tthis.center = this.target;\n\n\t// This option actually enables dollying in and out; left as \"zoom\" for\n\t// backwards compatibility\n\tthis.noZoom = false;\n\tthis.zoomSpeed = 1.0;\n\t// Limits to how far you can dolly in and out\n\tthis.minDistance = 0;\n\tthis.maxDistance = Infinity;\n\n\t// Set to true to disable this control\n\tthis.noRotate = false;\n\tthis.rotateSpeed = 1.0;\n\n\t// Set to true to disable this control\n\tthis.noPan = false;\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t// Set to true to automatically rotate around the target\n\tthis.autoRotate = false;\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t// How far you can orbit vertically, upper and lower limits.\n\t// Range is 0 to Math.PI radians.\n\tthis.minPolarAngle = 0; // radians\n\tthis.maxPolarAngle = Math.PI; // radians\n\n\t// Set to true to disable use of the keys\n\tthis.noKeys = false;\n\t// The four arrow keys\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t////////////\n\t// internals\n\n\tvar scope = this;\n\n\tvar EPS = 0.000001;\n\n\tvar rotateStart = new THREE.Vector2();\n\tvar rotateEnd = new THREE.Vector2();\n\tvar rotateDelta = new THREE.Vector2();\n\n\tvar panStart = new THREE.Vector2();\n\tvar panEnd = new THREE.Vector2();\n\tvar panDelta = new THREE.Vector2();\n\n\tvar dollyStart = new THREE.Vector2();\n\tvar dollyEnd = new THREE.Vector2();\n\tvar dollyDelta = new THREE.Vector2();\n\n\tvar phiDelta = 0;\n\tvar thetaDelta = 0;\n\tvar scale = 1;\n\tvar pan = new THREE.Vector3();\n\n\tvar lastPosition = new THREE.Vector3();\n\n\tvar STATE = { NONE : -1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };\n\tvar state = STATE.NONE;\n\n\t// events\n\n\tvar changeEvent = { type: 'change' };\n\n\n\tthis.rotateLeft = function ( angle ) {\n\n\t\tif ( angle === undefined ) {\n\n\t\t\tangle = getAutoRotationAngle();\n\n\t\t}\n\n\t\tthetaDelta -= angle;\n\n\t};\n\n\tthis.rotateUp = function ( angle ) {\n\n\t\tif ( angle === undefined ) {\n\n\t\t\tangle = getAutoRotationAngle();\n\n\t\t}\n\n\t\tphiDelta -= angle;\n\n\t};\n\n\t// pass in distance in world space to move left\n\tthis.panLeft = function ( distance ) {\n\n\t\tvar panOffset = new THREE.Vector3();\n\t\tvar te = this.object.matrix.elements;\n\t\t// get X column of matrix\n\t\tpanOffset.set( te[0], te[1], te[2] );\n\t\tpanOffset.multiplyScalar(-distance);\n\t\t\n\t\tpan.add( panOffset );\n\n\t};\n\n\t// pass in distance in world space to move up\n\tthis.panUp = function ( distance ) {\n\n\t\tvar panOffset = new THREE.Vector3();\n\t\tvar te = this.object.matrix.elements;\n\t\t// get Y column of matrix\n\t\tpanOffset.set( te[4], te[5], te[6] );\n\t\tpanOffset.multiplyScalar(distance);\n\t\t\n\t\tpan.add( panOffset );\n\t};\n\t\n\t// main entry point; pass in Vector2 of change desired in pixel space,\n\t// right and down are positive\n\tthis.pan = function ( delta ) {\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\tif ( scope.object.fov !== undefined ) {\n\n\t\t\t// perspective\n\t\t\tvar position = scope.object.position;\n\t\t\tvar offset = position.clone().sub( scope.target );\n\t\t\tvar targetDistance = offset.length();\n\n\t\t\t// half of the fov is center to top of screen\n\t\t\ttargetDistance *= Math.tan( (scope.object.fov/2) * Math.PI / 180.0 );\n\t\t\t// we actually don't use screenWidth, since perspective camera is fixed to screen height\n\t\t\tscope.panLeft( 2 * delta.x * targetDistance / element.clientHeight );\n\t\t\tscope.panUp( 2 * delta.y * targetDistance / element.clientHeight );\n\n\t\t} else if ( scope.object.top !== undefined ) {\n\n\t\t\t// orthographic\n\t\t\tscope.panLeft( delta.x * (scope.object.right - scope.object.left) / element.clientWidth );\n\t\t\tscope.panUp( delta.y * (scope.object.top - scope.object.bottom) / element.clientHeight );\n\n\t\t} else {\n\n\t\t\t// camera neither orthographic or perspective - warn user\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\n\t\t}\n\n\t};\n\n\tthis.dollyIn = function ( dollyScale ) {\n\n\t\tif ( dollyScale === undefined ) {\n\n\t\t\tdollyScale = getZoomScale();\n\n\t\t}\n\n\t\tscale /= dollyScale;\n\n\t};\n\n\tthis.dollyOut = function ( dollyScale ) {\n\n\t\tif ( dollyScale === undefined ) {\n\n\t\t\tdollyScale = getZoomScale();\n\n\t\t}\n\n\t\tscale *= dollyScale;\n\n\t};\n\n\tthis.update = function () {\n\n\t\tvar position = this.object.position;\n\t\tvar offset = position.clone().sub( this.target );\n\n\t\t// angle from z-axis around y-axis\n\n\t\tvar theta = Math.atan2( offset.x, offset.z );\n\n\t\t// angle from y-axis\n\n\t\tvar phi = Math.atan2( Math.sqrt( offset.x * offset.x + offset.z * offset.z ), offset.y );\n\n\t\tif ( this.autoRotate ) {\n\n\t\t\tthis.rotateLeft( getAutoRotationAngle() );\n\n\t\t}\n\n\t\ttheta += thetaDelta;\n\t\tphi += phiDelta;\n\n\t\t// restrict phi to be between desired limits\n\t\tphi = Math.max( this.minPolarAngle, Math.min( this.maxPolarAngle, phi ) );\n\n\t\t// restrict phi to be betwee EPS and PI-EPS\n\t\tphi = Math.max( EPS, Math.min( Math.PI - EPS, phi ) );\n\n\t\tvar radius = offset.length() * scale;\n\n\t\t// restrict radius to be between desired limits\n\t\tradius = Math.max( this.minDistance, Math.min( this.maxDistance, radius ) );\n\t\t\n\t\t// move target to panned location\n\t\tthis.target.add( pan );\n\n\t\toffset.x = radius * Math.sin( phi ) * Math.sin( theta );\n\t\toffset.y = radius * Math.cos( phi );\n\t\toffset.z = radius * Math.sin( phi ) * Math.cos( theta );\n\n\t\tposition.copy( this.target ).add( offset );\n\n\t\tthis.object.lookAt( this.target );\n\n\t\tthetaDelta = 0;\n\t\tphiDelta = 0;\n\t\tscale = 1;\n\t\tpan.set(0,0,0);\n\n\t\tif ( lastPosition.distanceTo( this.object.position ) > 0 ) {\n\n\t\t\tthis.dispatchEvent( changeEvent );\n\n\t\t\tlastPosition.copy( this.object.position );\n\n\t\t}\n\n\t};\n\n\n\tfunction getAutoRotationAngle() {\n\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t}\n\n\tfunction getZoomScale() {\n\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t}\n\n\tfunction onMouseDown( event ) {\n\n\t\tif ( scope.enabled === false ) { return; }\n\t\tevent.preventDefault();\n\n\t\tif ( event.button === 0 ) {\n\t\t\tif ( scope.noRotate === true ) { return; }\n\n\t\t\tstate = STATE.ROTATE;\n\n\t\t\trotateStart.set( event.clientX, event.clientY );\n\n\t\t} else if ( event.button === 1 ) {\n\t\t\tif ( scope.noZoom === true ) { return; }\n\n\t\t\tstate = STATE.DOLLY;\n\n\t\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t\t} else if ( event.button === 2 ) {\n\t\t\tif ( scope.noPan === true ) { return; }\n\n\t\t\tstate = STATE.PAN;\n\n\t\t\tpanStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\t// Greggman fix: https://github.com/greggman/three.js/commit/fde9f9917d6d8381f06bf22cdff766029d1761be\n\t\tscope.domElement.addEventListener( 'mousemove', onMouseMove, false );\n\t\tscope.domElement.addEventListener( 'mouseup', onMouseUp, false );\n\n\t}\n\n\tfunction onMouseMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\tif ( state === STATE.ROTATE ) {\n\n\t\t\tif ( scope.noRotate === true ) return;\n\n\t\t\trotateEnd.set( event.clientX, event.clientY );\n\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\tscope.rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\tscope.rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\t\trotateStart.copy( rotateEnd );\n\n\t\t} else if ( state === STATE.DOLLY ) {\n\n\t\t\tif ( scope.noZoom === true ) return;\n\n\t\t\tdollyEnd.set( event.clientX, event.clientY );\n\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\t\tscope.dollyIn();\n\n\t\t\t} else {\n\n\t\t\t\tscope.dollyOut();\n\n\t\t\t}\n\n\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t} else if ( state === STATE.PAN ) {\n\n\t\t\tif ( scope.noPan === true ) return;\n\n\t\t\tpanEnd.set( event.clientX, event.clientY );\n\t\t\tpanDelta.subVectors( panEnd, panStart );\n\t\t\t\n\t\t\tscope.pan( panDelta );\n\n\t\t\tpanStart.copy( panEnd );\n\n\t\t}\n\n\t\t// Greggman fix: https://github.com/greggman/three.js/commit/fde9f9917d6d8381f06bf22cdff766029d1761be\n\t\tscope.update();\n\n\t}\n\n\tfunction onMouseUp( /* event */ ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\t// Greggman fix: https://github.com/greggman/three.js/commit/fde9f9917d6d8381f06bf22cdff766029d1761be\n\t\tscope.domElement.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tscope.domElement.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onMouseWheel( event ) {\n\n\t\tif ( scope.enabled === false || scope.noZoom === true ) return;\n\n\t\tvar delta = 0;\n\n\t\tif ( event.wheelDelta ) { // WebKit / Opera / Explorer 9\n\n\t\t\tdelta = event.wheelDelta;\n\n\t\t} else if ( event.detail ) { // Firefox\n\n\t\t\tdelta = - event.detail;\n\n\t\t}\n\n\t\tif ( delta > 0 ) {\n\n\t\t\tscope.dollyOut();\n\n\t\t} else {\n\n\t\t\tscope.dollyIn();\n\n\t\t}\n\n\t}\n\n\tfunction onKeyDown( event ) {\n\n\t\tif ( scope.enabled === false ) { return; }\n\t\tif ( scope.noKeys === true ) { return; }\n\t\tif ( scope.noPan === true ) { return; }\n\n\t\t// pan a pixel - I guess for precise positioning?\n\t\t// Greggman fix: https://github.com/greggman/three.js/commit/fde9f9917d6d8381f06bf22cdff766029d1761be\n\t\tvar needUpdate = false;\n\t\t\n\t\tswitch ( event.keyCode ) {\n\n\t\t\tcase scope.keys.UP:\n\t\t\t\tscope.pan( new THREE.Vector2( 0, scope.keyPanSpeed ) );\n\t\t\t\tneedUpdate = true;\n\t\t\t\tbreak;\n\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\tscope.pan( new THREE.Vector2( 0, -scope.keyPanSpeed ) );\n\t\t\t\tneedUpdate = true;\n\t\t\t\tbreak;\n\t\t\tcase scope.keys.LEFT:\n\t\t\t\tscope.pan( new THREE.Vector2( scope.keyPanSpeed, 0 ) );\n\t\t\t\tneedUpdate = true;\n\t\t\t\tbreak;\n\t\t\tcase scope.keys.RIGHT:\n\t\t\t\tscope.pan( new THREE.Vector2( -scope.keyPanSpeed, 0 ) );\n\t\t\t\tneedUpdate = true;\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Greggman fix: https://github.com/greggman/three.js/commit/fde9f9917d6d8381f06bf22cdff766029d1761be\n\t\tif ( needUpdate ) {\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t}\n\t\n\tfunction touchstart( event ) {\n\n\t\tif ( scope.enabled === false ) { return; }\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1:\t// one-fingered touch: rotate\n\t\t\t\tif ( scope.noRotate === true ) { return; }\n\n\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\t// two-fingered touch: dolly\n\t\t\t\tif ( scope.noZoom === true ) { return; }\n\n\t\t\t\tstate = STATE.TOUCH_DOLLY;\n\n\t\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\t\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\t\t\t\tdollyStart.set( 0, distance );\n\t\t\t\tbreak;\n\n\t\t\tcase 3: // three-fingered touch: pan\n\t\t\t\tif ( scope.noPan === true ) { return; }\n\n\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\t}\n\n\tfunction touchmove( event ) {\n\n\t\tif ( scope.enabled === false ) { return; }\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1: // one-fingered touch: rotate\n\t\t\t\tif ( scope.noRotate === true ) { return; }\n\t\t\t\tif ( state !== STATE.TOUCH_ROTATE ) { return; }\n\n\t\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\t\tscope.rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\t\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\t\tscope.rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\t\t\trotateStart.copy( rotateEnd );\n\t\t\t\tbreak;\n\n\t\t\tcase 2: // two-fingered touch: dolly\n\t\t\t\tif ( scope.noZoom === true ) { return; }\n\t\t\t\tif ( state !== STATE.TOUCH_DOLLY ) { return; }\n\n\t\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\t\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\t\t\tdollyEnd.set( 0, distance );\n\t\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\t\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\t\t\tscope.dollyOut();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tscope.dollyIn();\n\n\t\t\t\t}\n\n\t\t\t\tdollyStart.copy( dollyEnd );\n\t\t\t\tbreak;\n\n\t\t\tcase 3: // three-fingered touch: pan\n\t\t\t\tif ( scope.noPan === true ) { return; }\n\t\t\t\tif ( state !== STATE.TOUCH_PAN ) { return; }\n\n\t\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\t\tpanDelta.subVectors( panEnd, panStart );\n\t\t\t\t\n\t\t\t\tscope.pan( panDelta );\n\n\t\t\t\tpanStart.copy( panEnd );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t}\n\n\tfunction touchend( /* event */ ) {\n\n\t\tif ( scope.enabled === false ) { return; }\n\n\t\tstate = STATE.NONE;\n\t}\n\n\tthis.domElement.addEventListener( 'contextmenu', function ( event ) { event.preventDefault(); }, false );\n\tthis.localElement.addEventListener( 'mousedown', onMouseDown, false );\n\tthis.domElement.addEventListener( 'mousewheel', onMouseWheel, false );\n\tthis.domElement.addEventListener( 'DOMMouseScroll', onMouseWheel, false ); // firefox\n\n\tthis.domElement.addEventListener( 'keydown', onKeyDown, false );\n\n\tthis.localElement.addEventListener( 'touchstart', touchstart, false );\n\tthis.domElement.addEventListener( 'touchend', touchend, false );\n\tthis.domElement.addEventListener( 'touchmove', touchmove, false );\n\n};\n\nTHREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );"],"sourceRoot":"webpack:///"}