{"version":3,"sources":["webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/drag-drop.js","webpack:///src/app/components/animate-image/animate-image-routing.module.ts","webpack:///src/app/components/animate-image/show-animation/show-animation.component.ts","webpack:///src/app/components/animate-image/show-animation/show-animation.component.html","webpack:///src/app/components/animate-image/animate-image.module.ts","webpack:///src/app/components/animate-image/animate-image.component.ts","webpack:///src/app/components/animate-image/animate-image.component.html"],"names":["extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","element","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","value","multiplier","toLowerCase","indexOf","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","find","prop","propertyIndex","rawDurations","rawDelays","name","getPropertyValue","split","map","part","trim","getMutableClientRect","clientRect","getBoundingClientRect","top","right","bottom","left","width","height","isInsideClientRect","x","y","adjustClientRect","isPointerNearClientRect","rect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","_document","_viewportRuler","positions","Map","clear","elements","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","event","target","cachedPosition","get","scrolledParentNode","documentElement","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","position","node","contains","passiveEventListenerOptions","passive","activeEventListenerOptions","MOUSE_EVENT_IGNORE_TIME","DragRef","_config","_ngZone","_dragDropRegistry","_passiveTransform","_activeTransform","_moveEvents","_pointerMoveSubscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","Set","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","asObservable","_pointerDown","next","length","targetHandle","handle","has","disabled","_initializeDragSequence","_rootElement","_pointerMove","preventDefault","pointerPosition","_getPointerPositionOnPage","_hasStartedDragging","distanceX","Math","abs","_pickupPositionOnPage","distanceY","isOverThreshold","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","_endDragSequence","_dropContainer","isDragging","run","_startDragSequence","_previewRect","_preview","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_updateActiveDropContainer","activeTransform","_applyRootElementTransform","SVGElement","appliedTransform","setAttribute","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","withRootElement","_parentPositions","registerDragItem","_placeholder","getPlaceholderElement","getRootElement","handles","_toggleNativeDragInteractions","template","_previewTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","addEventListener","_initialTransform","undefined","_ownerSVGElement","ownerSVGElement","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","removeNode","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","transform","add","direction","container","_previewRef","destroy","_placeholderRef","stopDragging","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","isTouchEvent","_lastTouchEventTime","dropContainer","parent","parentNode","preview","_createPreviewElement","placeholder","_createPlaceholderElement","anchor","createComment","insertBefore","display","body","appendChild","replaceChild","getPreviewInsertionPoint","start","_initialContainer","_initialIndex","getItemIndex","cache","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","type","pointerMove","pointerUp","scroll","scrollEvent","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","getTransform","previewConfig","previewClass","rootRect","viewRef","viewContainer","createEmbeddedView","context","detectChanges","getRootNode","matchElementSize","deepCloneNode","pointerEvents","margin","zIndex","classList","Array","isArray","className","Promise","resolve","placeholderRect","duration","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","constrainPosition","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","minX","maxX","clamp","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","setFreeDragPosition","touch","mouse","scrollDifference","handleScroll","newValue","round","clone","cloneNode","descendantsWithId","querySelectorAll","descendantCanvases","removeAttribute","i","cloneCanvases","correspondingCloneContext","getContext","drawImage","_a","min","max","removeChild","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","moveItemInArray","array","fromIndex","toIndex","from","clamp$1","to","transferArrayItem","currentArray","targetArray","targetIndex","splice","copyArrayItem","DROP_PROXIMITY_THRESHOLD","SCROLL_PROXIMITY_THRESHOLD","AUTO_SCROLL_STEP","DropListRef","autoScrollDisabled","enterPredicate","sorted","_isDragging","_itemPositions","_previousSwap","drag","overlaps","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_cachedShadowRoot","_startScrollInterval","pipe","_scrollNode","incrementVerticalScroll","incrementHorizontalScroll","withScrollableParents","registerDropContainer","removeDropContainer","styles","_initialScrollSnap","msScrollSnapType","scrollSnapType","_cacheItems","sibling","_startReceiving","_listenToScrollEvents","index","newIndex","_draggables","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","newPositionReference","parentElement","_shouldEnterAsFirstChild","reference","unshift","push","_cacheItemPositions","_cacheParentPositions","_reset","items","previousItems","_withDropContainer","draggedItems","filter","every","connectedTo","slice","orientation","_scrollableElements","reverse","findIndex","currentItem","size","pointerDelta","_clientRect","siblings","isHorizontal","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","isDraggedItem","offset","elementToOffset","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","getViewportSize","getVerticalScrollDirection","getHorizontalScrollDirection","window","elementToMeasure","getVisibleElement","sort","a","b","_stopReceiving","immediateSibling","end","itemPositions","reversed","lastItemRect","firstItemRect","_","floor","_canReceive","elementFromPoint","_getShadowRoot","nativeElement","activeSiblings","_sortFromLastPointerPosition","isReceiving","shadowRoot","predicate","amount","scrollBy","computedVertical","computedHorizontal","scrollHeight","clientHeight","scrollWidth","clientWidth","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_preventDefaultWhileDragging","startsWith","moveEvent","upEvent","e","options","config","_clearGlobalListeners","instance","ɵfac","DragDropRegistry_Factory","t","ɵprov","factory","token","providedIn","ctorParameters","decorators","args","DEFAULT_CONFIG","DragDrop","DragDrop_Factory","CDK_DRAG_PARENT","CdkDragHandle","parentDrag","_stateChanges","_parentDrag","CdkDragHandle_Factory","ɵdir","selectors","hostAttrs","inputs","propDecorators","selector","host","CdkDragPlaceholder","templateRef","CdkDragPlaceholder_Factory","data","CdkDragPreview","_matchSize","CdkDragPreview_Factory","CDK_DRAG_CONFIG","CDK_DROP_LIST","CdkDrag","_viewContainerRef","_dir","dragDrop","_changeDetectorRef","_destroyed","observer","subscription","_dragRef","movedEvent","createDrag","_assignDefaults","_dropListRef","addItem","_syncInputs","_handleEvents","reset","getFreeDragPosition","onStable","_updateRootElement","changes","childHandleElements","withHandles","handleInstance","dragRef","disableHandle","enableHandle","freeDragPosition","rootSelectorChange","positionChange","firstChange","removeItem","dispose","rootElementSelector","getClosestMatchingAncestor","Error","nodeName","boundary","ref","dir","withBoundaryElement","_getBoundaryElement","withPlaceholderTemplate","withPreviewTemplate","withDirection","emit","markForCheck","draggingDisabled","CdkDrag_Factory","contentQueries","CdkDrag_ContentQueries","rf","ctx","dirIndex","_t","first","hostVars","hostBindings","CdkDrag_HostBindings","outputs","exportAs","features","provide","useExisting","descendants","providers","currentElement","matches","msMatchesSelector","CdkDropListGroup","_items","CdkDropListGroup_Factory","_uniqueIdCounter","ɵ0","CdkDropList","_group","_scrollDispatcher","id","_unsortedItems","createDropList","_setupInputSyncSubscription","_dropLists","_syncItemsWithRef","documentPosition","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","list","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","withOrientation","listAutoScrollDisabled","listOrientation","withItems","getSortedItems","CdkDropList_Factory","CdkDropList_HostBindings","useValue","DragDropModule","ɵmod","ɵinj","DragDropModule_Factory","imports","ngJitMode","declarations","exports","routes","path","component","AnimateImageRoutingModule","forChild","ShowAnimationComponent","title","renderer","THREE","WebGLRenderer","antialias","alpha","setClearColor","Color","setSize","domElement","document","onRenderFcts","scene","Scene","camera","Camera","arToolkitSource","THREEx","ArToolkitSource","sourceType","init","onReady","onResize","onResizeElement","copyElementSizeTo","arToolkitContext","arController","canvas","ArToolkitContext","cameraParametersUrl","baseURL","detectionMode","onCompleted","projectionMatrix","copy","getProjectionMatrix","ready","update","visible","markerControls","ArMarkerControls","patternUrl","changeMatrixMode","geometry","CubeGeometry","material","MeshNormalMaterial","transparent","opacity","side","DoubleSide","mesh","Mesh","parameters","TorusKnotGeometry","rotation","PI","render","lastTimeMsec","requestAnimationFrame","animate","nowMsec","deltaMsec","onRenderFct","templateUrl","styleUrls","arContentDiv","DEFAULT_DROPZONE_CONFIG","maxFilesize","url","AnimateImageModule","schemas","AnimateImageComponent","basket","config1","clickable","maxFiles","autoReset","errorReset","cancelReset","querySelector","fullMarkerImage","src","dataURL","firstChild","onUploadError","onUploadSuccess","markeronUploadError","markeronUploadSuccess"],"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","file":"components-animate-image-animate-image-module-es5.js","sourcesContent":["import { ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, Inject, InjectionToken, Directive, ElementRef, Optional, Input, TemplateRef, EventEmitter, isDevMode, SkipSelf, ViewContainerRef, ChangeDetectorRef, ContentChildren, ContentChild, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, map, take, startWith, tap, switchMap } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = source[key];\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        touchAction: enable ? '' : 'none',\n        webkitUserDrag: enable ? '' : 'none',\n        webkitTapHighlightColor: enable ? '' : 'transparent',\n        userSelect: userSelect,\n        msUserSelect: userSelect,\n        webkitUserSelect: userSelect,\n        MozUserSelect: userSelect\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document, _viewportRuler) {\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this._viewportRuler.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element)\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = event.target;\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        // Used when figuring out whether an element is inside the scroll parent. If the scrolled\n        // parent is the `document`, we use the `documentElement`, because IE doesn't support\n        // `contains` on the `document`.\n        const scrolledParentNode = target === this._document ? target.documentElement : target;\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && scrolledParentNode.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents.asObservable();\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._handles.find(handle => {\n                    const target = event.target;\n                    return !!target && (target === handle || handle.contains(target));\n                });\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            // Prevent the default action as early as possible in order to block\n            // native actions like dragging the selected text or images with the mouse.\n            event.preventDefault();\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!this._dropContainer || !this._dropContainer.isDragging()) {\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n                }\n            }\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n                    const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n                    this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        this.withRootElement(element);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, false));\n        this._toggleNativeDragInteractions();\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeNode(this._rootElement);\n        }\n        removeNode(this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement = this._rootElement = this._ownerSVGElement = this._placeholderTemplate =\n            this._previewTemplate = this._anchor = null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        this._disabledHandles.delete(handle);\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        if (this._preview) {\n            removeNode(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        if (this._placeholder) {\n            removeNode(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(this._getPointerPositionOnPage(event))\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const preview = this._preview = this._createPreviewElement();\n            const placeholder = this._placeholder = this._createPlaceholderElement();\n            const anchor = this._anchor = this._anchor || this._document.createComment('');\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            element.style.display = 'none';\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            getPreviewInsertionPoint(this._document).appendChild(preview);\n            this.started.next({ source: this }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Always stop propagation for the event that initializes\n        // the dragging sequence, in order to prevent it from potentially\n        // starting another sequence for a draggable parent somewhere up the DOM tree.\n        event.stopPropagation();\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (event.target && event.target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor || '';\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry.scroll.subscribe(scrollEvent => {\n            this._updateOnScroll(scrollEvent);\n        });\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement = previewTemplate && previewTemplate.template &&\n            !previewTemplate.matchSize ? { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        const pointerPosition = this._pickupPositionOnPage = this._lastKnownPointerPosition =\n            this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        this._rootElement.style.display = '';\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(this._getPointerPositionOnPage(event));\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance\n            });\n            container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer, distance, this._initialIndex);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled ? this._initialIndex : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this)\n                });\n            });\n        }\n        this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n        this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n        this._preview.style.transform =\n            getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    _createPreviewElement() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this.previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform =\n                    getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            const element = this._rootElement;\n            preview = deepCloneNode(element);\n            matchElementSize(preview, element.getBoundingClientRect());\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            pointerEvents: 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            margin: '0',\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            zIndex: `${this._config.zIndex || 1000}`\n        });\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n                        this._preview.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event) ?\n            // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n            // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n            // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n            // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n            // throwing an error. The value returned here will be incorrect, but since this only\n            // breaks inside a developer tool and the value is only used for secondary information,\n            // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n            (event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }) : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            const boundaryRect = this._boundaryRect;\n            const previewRect = this._previewRect;\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\n            x = clamp(x, minX, maxX);\n            y = clamp(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform || '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = this._initialTransform ?\n            transform + ' ' + this._initialTransform : transform;\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        const elementRect = this._rootElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = event.target;\n            // ClientRect dimensions are based on the scroll position of the page and its parent node so\n            // we have to update the cached boundary ClientRect if the user has scrolled. Check for\n            // the `document` specifically since IE doesn't support `contains` on it.\n            if (this._boundaryRect && (target === this._document ||\n                (target !== this._boundaryElement && target.contains(this._boundaryElement)))) {\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        const cachedPosition = this._parentPositions.positions.get(this._document);\n        return cachedPosition ? cachedPosition.scrollPosition :\n            this._viewportRuler.getViewportScrollPosition();\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const descendantCanvases = node.querySelectorAll('canvas');\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    // `cloneNode` won't transfer the content of `canvas` elements so we have to do it ourselves.\n    // We match up the cloned canvas to their sources using their index in the DOM.\n    if (descendantCanvases.length) {\n        const cloneCanvases = clone.querySelectorAll('canvas');\n        for (let i = 0; i < descendantCanvases.length; i++) {\n            const correspondingCloneContext = cloneCanvases[i].getContext('2d');\n            if (correspondingCloneContext) {\n                // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n                // We can't do much about it so just ignore the error.\n                try {\n                    correspondingCloneContext.drawImage(descendantCanvases[i], 0, 0);\n                }\n                catch (_a) { }\n            }\n        }\n    }\n    return clone;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param node Node to be removed.\n */\nfunction removeNode(node) {\n    if (node && node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Gets the element into which the drag preview should be inserted. */\nfunction getPreviewInsertionPoint(documentRef) {\n    // We can't use the body if the user is in fullscreen mode,\n    // because the preview will render under the fullscreen element.\n    // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n    return documentRef.fullscreenElement ||\n        documentRef.webkitFullscreenElement ||\n        documentRef.mozFullScreenElement ||\n        documentRef.msFullscreenElement ||\n        documentRef.body;\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp$1(fromIndex, array.length - 1);\n    const to = clamp$1(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp$1(currentIndex, currentArray.length - 1);\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp$1(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Number of pixels to scroll for each frame when auto-scrolling an element.\n * The value comes from trying it out manually until it feels right.\n */\nconst AUTO_SCROLL_STEP = 2;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occured and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = { drag: null, delta: 0, overlaps: false };\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Direction in which the list is oriented. */\n        this._orientation = 'vertical';\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Layout direction of the drop list. */\n        this._direction = 'ltr';\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    incrementVerticalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    incrementVerticalScroll(node, AUTO_SCROLL_STEP);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    incrementHorizontalScroll(node, AUTO_SCROLL_STEP);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._cacheItems();\n        this._siblings.forEach(sibling => sibling._startReceiving(this));\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this.start();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        let newIndex;\n        if (index == null) {\n            newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n            if (newIndex === -1) {\n                // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n            }\n        }\n        else {\n            newIndex = index;\n        }\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else if (this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            const reference = activeDraggables[0].getRootElement();\n            reference.parentNode.insertBefore(placeholder, reference);\n            activeDraggables.unshift(item);\n        }\n        else {\n            coerceElement(this.element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed and also parent rects.\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param previousIndex Index of the item when dragging started.\n     *\n     * @breaking-change 11.0.0 `previousIndex` parameter to become required.\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer, distance, previousIndex) {\n        this._reset();\n        // @breaking-change 11.0.0 Remove this fallback logic once `previousIndex` is a required param.\n        if (previousIndex == null) {\n            previousIndex = previousContainer.getItemIndex(item);\n        }\n        this.dropped.next({ item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._cacheItems();\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        this._orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, currentItem => currentItem.drag === item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item\n        });\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = 0 /* NONE */;\n        let horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const clientRect = { width, height, top: 0, right: width, bottom: height, left: 0 };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\n            scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return { drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure) };\n        }).sort((a, b) => {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                rootElement.style.transform = '';\n            }\n        });\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this._orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        return findIndex(this._itemPositions, ({ drag, clientRect }, _, array) => {\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag && this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n    }\n    /** Caches the current items in the list and their positions. */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling)) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    // Since we know the amount that the user has scrolled we can shift all of the\n                    // client rectangles ourselves. This is cheaper than re-measuring everything and\n                    // we can avoid inconsistent behavior where we might be measuring the element before\n                    // its position has changed.\n                    this._itemPositions.forEach(({ clientRect }) => {\n                        adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);\n                    });\n                    // We need two loops for this, because we want all of the cached\n                    // positions to be up-to-date before we re-sort the item.\n                    this._itemPositions.forEach(({ drag }) => {\n                        if (this._dragDropRegistry.isDragging(drag)) {\n                            // We need to re-sort the item manually, because the pointer move\n                            // events won't be dispatched while the user is scrolling.\n                            drag._sortFromLastPointerPosition();\n                        }\n                    });\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementVerticalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(0, amount);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollTop += amount;\n    }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementHorizontalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(amount, 0);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollLeft += amount;\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = 0 /* NONE */;\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = new Set();\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /** Emits when the viewport has been scrolled while the user is dragging an item. */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.size) {\n                event.preventDefault();\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.has(drag)) {\n            return;\n        }\n        this._activeDragInstances.add(drag);\n        if (this._activeDragInstances.size === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n            const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(moveEvent, {\n                handler: (e) => this.pointerMove.next(e),\n                options: activeCapturingEventOptions\n            })\n                .set(upEvent, {\n                handler: (e) => this.pointerUp.next(e),\n                options: true\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        this._activeDragInstances.delete(drag);\n        if (this._activeDragInstances.size === 0) {\n            this._clearGlobalListeners();\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.has(drag);\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) { return new (t || DragDropRegistry)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nDragDropRegistry.ɵprov = ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\nDragDropRegistry.ctorParameters = () => [\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDropRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.ɵfac = function DragDrop_Factory(t) { return new (t || DragDrop)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DragDropRegistry)); };\nDragDrop.ɵprov = ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(ɵɵinject(DOCUMENT), ɵɵinject(NgZone), ɵɵinject(ViewportRuler), ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\nDragDrop.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewportRuler },\n    { type: DragDropRegistry }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDrop, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.ViewportRuler }, { type: DragDropRegistry }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Handle that can be used to drag and CdkDrag instance. */\nclass CdkDragHandle {\n    constructor(element, parentDrag) {\n        this.element = element;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        this._parentDrag = parentDrag;\n        toggleNativeDragInteractions(element.nativeElement, false);\n    }\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) { return new (t || CdkDragHandle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 8)); };\nCdkDragHandle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragHandle, selectors: [[\"\", \"cdkDragHandle\", \"\"]], hostAttrs: [1, \"cdk-drag-handle\"], inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] } });\nCdkDragHandle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }] }\n];\nCdkDragHandle.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragHandle, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDragHandle]',\n                host: {\n                    'class': 'cdk-drag-handle'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }, {\n                type: Optional\n            }] }]; }, { disabled: [{\n            type: Input,\n            args: ['cdkDragHandleDisabled']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) { return new (t || CdkDragPlaceholder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPlaceholder.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPlaceholder, selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]], inputs: { data: \"data\" } });\nCdkDragPlaceholder.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPlaceholder.propDecorators = {\n    data: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragPlaceholder, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPlaceholder]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { data: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    get matchSize() { return this._matchSize; }\n    set matchSize(value) { this._matchSize = coerceBooleanProperty(value); }\n}\nCdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) { return new (t || CdkDragPreview)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPreview.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPreview, selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]], inputs: { matchSize: \"matchSize\", data: \"data\" } });\nCdkDragPreview.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPreview.propDecorators = {\n    data: [{ type: Input }],\n    matchSize: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragPreview, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPreview]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { matchSize: [{\n            type: Input\n        }], data: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n */\nconst CDK_DROP_LIST = new InjectionToken('CDK_DROP_LIST');\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._destroyed = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance\n            }))).subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ?\n                config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ?\n                config.pointerDirectionChangeThreshold : 5,\n            zIndex: config === null || config === void 0 ? void 0 : config.zIndex\n        });\n        this._dragRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    ngAfterViewInit() {\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1), takeUntil(this._destroyed))\n            .subscribe(() => {\n            this._updateRootElement();\n            // Listen for any newly-added handles.\n            this._handles.changes.pipe(startWith(this._handles), \n            // Sync the new handles with the DragRef.\n            tap((handles) => {\n                const childHandleElements = handles\n                    .filter(handle => handle._parentDrag === this)\n                    .map(handle => handle.element);\n                this._dragRef.withHandles(childHandleElements);\n            }), \n            // Listen if the state of any of the handles changes.\n            switchMap((handles) => {\n                return merge(...handles.map(item => {\n                    return item._stateChanges.pipe(startWith(item));\n                }));\n            }), takeUntil(this._destroyed)).subscribe(handleInstance => {\n                // Enabled/disable the handle that changed in the DragRef.\n                const dragRef = this._dragRef;\n                const handle = handleInstance.element.nativeElement;\n                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n            });\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._dragRef.dispose();\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        const rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n            throw Error(`cdkDrag must be attached to an element node. ` +\n                `Currently attached to \"${rootElement.nodeName}\".`);\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n        const element = coerceElement(boundary);\n        if (isDevMode() && !element.contains(this.element.nativeElement)) {\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n        return element;\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate ? {\n                    template: this._placeholderTemplate.templateRef,\n                    context: this._placeholderTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                const preview = this._previewTemplate ? {\n                    template: this._previewTemplate.templateRef,\n                    context: this._previewTemplate.data,\n                    matchSize: this._previewTemplate.matchSize,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n                    dragStartDelay : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview);\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(() => {\n            this.started.emit({ source: this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(() => {\n            this.released.emit({ source: this });\n        });\n        ref.ended.subscribe(event => {\n            this.ended.emit({ source: this, distance: event.distance });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: event.container.data,\n                item: this,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: event.container.data,\n                item: this\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: this,\n                distance: event.distance\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n    }\n}\nCdkDrag.ɵfac = function CdkDrag_Factory(t) { return new (t || CdkDrag)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nCdkDrag.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDrag, selectors: [[\"\", \"cdkDrag\", \"\"]], contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragPreview, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragPlaceholder, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragHandle, true);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._handles = _t);\n    } }, hostAttrs: [1, \"cdk-drag\"], hostVars: 4, hostBindings: function CdkDrag_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n    } }, inputs: { disabled: [\"cdkDragDisabled\", \"disabled\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], data: [\"cdkDragData\", \"data\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, exportAs: [\"cdkDrag\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]), ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkDrag.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: DragDrop },\n    { type: ChangeDetectorRef }\n];\nCdkDrag.propDecorators = {\n    _handles: [{ type: ContentChildren, args: [CdkDragHandle, { descendants: true },] }],\n    _previewTemplate: [{ type: ContentChild, args: [CdkDragPreview,] }],\n    _placeholderTemplate: [{ type: ContentChild, args: [CdkDragPlaceholder,] }],\n    data: [{ type: Input, args: ['cdkDragData',] }],\n    lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n    rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n    boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\n    dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n    freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n    disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n    constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n    previewClass: [{ type: Input, args: ['cdkDragPreviewClass',] }],\n    started: [{ type: Output, args: ['cdkDragStarted',] }],\n    released: [{ type: Output, args: ['cdkDragReleased',] }],\n    ended: [{ type: Output, args: ['cdkDragEnded',] }],\n    entered: [{ type: Output, args: ['cdkDragEntered',] }],\n    exited: [{ type: Output, args: ['cdkDragExited',] }],\n    dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n    moved: [{ type: Output, args: ['cdkDragMoved',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDrag, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDrag]',\n                exportAs: 'cdkDrag',\n                host: {\n                    'class': 'cdk-drag',\n                    '[class.cdk-drag-disabled]': 'disabled',\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()'\n                },\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DROP_LIST]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }]; }, { started: [{\n            type: Output,\n            args: ['cdkDragStarted']\n        }], released: [{\n            type: Output,\n            args: ['cdkDragReleased']\n        }], ended: [{\n            type: Output,\n            args: ['cdkDragEnded']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDragEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDragExited']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDragDropped']\n        }], moved: [{\n            type: Output,\n            args: ['cdkDragMoved']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDragDisabled']\n        }], dragStartDelay: [{\n            type: Input,\n            args: ['cdkDragStartDelay']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDragLockAxis']\n        }], constrainPosition: [{\n            type: Input,\n            args: ['cdkDragConstrainPosition']\n        }], previewClass: [{\n            type: Input,\n            args: ['cdkDragPreviewClass']\n        }], boundaryElement: [{\n            type: Input,\n            args: ['cdkDragBoundary']\n        }], rootElementSelector: [{\n            type: Input,\n            args: ['cdkDragRootElement']\n        }], _handles: [{\n            type: ContentChildren,\n            args: [CdkDragHandle, { descendants: true }]\n        }], _previewTemplate: [{\n            type: ContentChild,\n            args: [CdkDragPreview]\n        }], _placeholderTemplate: [{\n            type: ContentChild,\n            args: [CdkDragPlaceholder]\n        }], data: [{\n            type: Input,\n            args: ['cdkDragData']\n        }], freeDragPosition: [{\n            type: Input,\n            args: ['cdkDragFreeDragPosition']\n        }] }); })();\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element, selector) {\n    let currentElement = element.parentElement;\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            currentElement.msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) { return new (t || CdkDropListGroup)(); };\nCdkDropListGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropListGroup, selectors: [[\"\", \"cdkDropListGroup\", \"\"]], inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, exportAs: [\"cdkDropListGroup\"] });\nCdkDropListGroup.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDropListGroup, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropListGroup]',\n                exportAs: 'cdkDropListGroup'\n            }]\n    }], function () { return []; }, { disabled: [{\n            type: Input,\n            args: ['cdkDropListGroupDisabled']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\nconst ɵ0 = undefined;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _dir, _group, \n    /**\n     * @deprecated _scrollDispatcher parameter to become required.\n     * @breaking-change 11.0.0\n     */\n    _scrollDispatcher, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._group = _group;\n        this._scrollDispatcher = _scrollDispatcher;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                return typeof drop === 'string' ?\n                    CdkDropList._dropLists.find(list => list.id === drop) : drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            // @breaking-change 11.0.0 Remove null check for _scrollDispatcher once it's required.\n            if (!this._scrollableParentsResolved && this._scrollDispatcher) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n}\nCdkDropList.ɵfac = function CdkDropList_Factory(t) { return new (t || CdkDropList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(CdkDropListGroup, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8)); };\nCdkDropList.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropList, selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]], hostAttrs: [1, \"cdk-drop-list\"], hostVars: 7, hostBindings: function CdkDropList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n    } }, inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], id: \"id\", enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], data: [\"cdkDropListData\", \"data\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, exportAs: [\"cdkDropList\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CdkDropListGroup, useValue: ɵ0 },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ])] });\n/** Keeps track of the drop lists that are currently on the page. */\nCdkDropList._dropLists = [];\nCdkDropList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: ScrollDispatcher },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] }\n];\nCdkDropList.propDecorators = {\n    connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n    data: [{ type: Input, args: ['cdkDropListData',] }],\n    orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n    id: [{ type: Input }],\n    lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n    disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n    sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n    enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n    autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\n    dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n    entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n    exited: [{ type: Output, args: ['cdkDropListExited',] }],\n    sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDropList, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropList], cdk-drop-list',\n                exportAs: 'cdkDropList',\n                providers: [\n                    // Prevent child drop lists from picking up the same group as their parent.\n                    { provide: CdkDropListGroup, useValue: ɵ0 },\n                    { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                ],\n                host: {\n                    'class': 'cdk-drop-list',\n                    '[id]': 'id',\n                    '[class.cdk-drop-list-disabled]': 'disabled',\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: CdkDropListGroup, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc1.ScrollDispatcher }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }]; }, { connectedTo: [{\n            type: Input,\n            args: ['cdkDropListConnectedTo']\n        }], id: [{\n            type: Input\n        }], enterPredicate: [{\n            type: Input,\n            args: ['cdkDropListEnterPredicate']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDropListDropped']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDropListEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDropListExited']\n        }], sorted: [{\n            type: Output,\n            args: ['cdkDropListSorted']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDropListDisabled']\n        }], sortingDisabled: [{\n            type: Input,\n            args: ['cdkDropListSortingDisabled']\n        }], autoScrollDisabled: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollDisabled']\n        }], orientation: [{\n            type: Input,\n            args: ['cdkDropListOrientation']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDropListLockAxis']\n        }], data: [{\n            type: Input,\n            args: ['cdkDropListData']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass DragDropModule {\n}\nDragDropModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DragDropModule });\nDragDropModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DragDropModule_Factory(t) { return new (t || DragDropModule)(); }, providers: [\n        DragDrop,\n    ], imports: [CdkScrollableModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DragDropModule, { declarations: function () { return [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; }, exports: function () { return [CdkScrollableModule, CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDropModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                providers: [\n                    DragDrop,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DROP_LIST, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem, CDK_DRAG_PARENT as ɵangular_material_src_cdk_drag_drop_drag_drop_b };\n\n//# sourceMappingURL=drag-drop.js.map","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AnimateImageComponent } from './animate-image.component';\nimport { ShowAnimationComponent } from './show-animation/show-animation.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AnimateImageComponent\n  },\n  {\n    path: 'show',\n    component: ShowAnimationComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AnimateImageRoutingModule { }\n","import { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\ndeclare var THREE: any;\ndeclare var THREEx: any;\n@Component({\n  selector: 'app-show-animation',\n  templateUrl: './show-animation.component.html',\n  styleUrls: ['./show-animation.component.scss']\n})\nexport class ShowAnimationComponent implements AfterViewInit {\n\n  constructor() { }\n  @ViewChild('arcontent') arContentDiv;\n\n  title = 'AR app';\n  \n  ngAfterViewInit(): void {\n\n    //////////////////////////////////////////////////////////////////////////////////\n    //\t\tInit\n    //////////////////////////////////////////////////////////////////////////////////\n    // init renderer\n    let renderer\t= new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    renderer.setClearColor(new THREE.Color('lightgrey'), 0);\n    renderer.setSize( 1500, 700 );\n    renderer.domElement.style.position = 'absolute';\n    renderer.domElement.style.top = '0px';\n    renderer.domElement.style.left = '0px';\n    document.body.appendChild( renderer.domElement );\n    // array of functions for the rendering loop\n    let onRenderFcts = [];\n    // init scene and camera\n    let scene\t= new THREE.Scene();\n\n    //////////////////////////////////////////////////////////////////////////////////\n    //\t\tInitialize a basic camera\n    //////////////////////////////////////////////////////////////////////////////////\n    // Create a camera\n    let camera = new THREE.Camera();\n    scene.add(camera);\n    ////////////////////////////////////////////////////////////////////////////////\n    //          handle arToolkitSource\n    ////////////////////////////////////////////////////////////////////////////////\n    let arToolkitSource = new THREEx.ArToolkitSource({\n      // to read from the webcam\n      sourceType : 'webcam',\n\n      // // to read from an image\n      // sourceType : 'image',\n      // sourceUrl : THREEx.ArToolkitContext.baseURL + '../data/images/img.jpg',\n      // to read from a video\n      // sourceType : 'video',\n      // sourceUrl : THREEx.ArToolkitContext.baseURL + '../data/videos/headtracking.mp4',\n    });\n    arToolkitSource.init(function onReady() {\n      onResize();\n    });\n\n    // handle resize\n    window.addEventListener('resize', function() {\n      onResize();\n    });\n    function onResize() {\n      arToolkitSource.onResizeElement();\n      arToolkitSource.copyElementSizeTo(renderer.domElement);\n      if ( arToolkitContext.arController !== null ) {\n        arToolkitSource.copyElementSizeTo(arToolkitContext.arController.canvas);\n      }\n    }\n    ////////////////////////////////////////////////////////////////////////////////\n    //          initialize arToolkitContext\n    ////////////////////////////////////////////////////////////////////////////////\n\n    // create atToolkitContext\n    let arToolkitContext = new THREEx.ArToolkitContext({\n      cameraParametersUrl: THREEx.ArToolkitContext.baseURL + '../data/data/camera_para.dat',\n      detectionMode: 'mono',\n    });\n    // initialize it\n    arToolkitContext.init(function onCompleted() {\n      // copy projection matrix to camera\n      camera.projectionMatrix.copy( arToolkitContext.getProjectionMatrix() );\n    });\n    // update artoolkit on every frame\n    onRenderFcts.push(function() {\n      if ( arToolkitSource.ready === false ) {\treturn; }\n      arToolkitContext.update( arToolkitSource.domElement );\n\n      // update scene.visible if the marker is seen\n      scene.visible = camera.visible;\n    });\n\n    ////////////////////////////////////////////////////////////////////////////////\n    //          Create a ArMarkerControls\n    ////////////////////////////////////////////////////////////////////////////////\n\n    // init controls for camera\n    let markerControls = new THREEx.ArMarkerControls(arToolkitContext, camera, {\n      type : 'pattern',\n      patternUrl : THREEx.ArToolkitContext.baseURL + '../data/data/patt.hiro',\n      // patternUrl : THREEx.ArToolkitContext.baseURL + '../data/data/patt.kanji',\n      // as we controls the camera, set changeMatrixMode: 'cameraTransformMatrix'\n      changeMatrixMode: 'cameraTransformMatrix'\n    });\n    // as we do changeMatrixMode: 'cameraTransformMatrix', start with invisible scene\n    scene.visible = false;\n    //////////////////////////////////////////////////////////////////////////////////\n    //\t\tadd an object in the scene\n    //////////////////////////////////////////////////////////////////////////////////\n    // add a torus knot\n    let geometry\t= new THREE.CubeGeometry(1, 1, 1);\n    let material\t= new THREE.MeshNormalMaterial({\n      transparent : true,\n      opacity: 0.5,\n      side: THREE.DoubleSide\n    });\n    let mesh\t= new THREE.Mesh( geometry, material );\n    mesh.position.y\t= geometry.parameters.height / 2;\n    scene.add( mesh );\n\n    geometry\t= new THREE.TorusKnotGeometry(0.3, 0.1, 64, 16);\n    material\t= new THREE.MeshNormalMaterial();\n    mesh\t= new THREE.Mesh( geometry, material );\n    mesh.position.y\t= 0.5;\n    scene.add( mesh );\n\n    onRenderFcts.push(function(delta) {\n      mesh.rotation.x += Math.PI * delta;\n    });\n    //////////////////////////////////////////////////////////////////////////////////\n    //\t\trender the whole thing on the page\n    //////////////////////////////////////////////////////////////////////////////////\n    // render the scene\n    onRenderFcts.push(function() {\n      renderer.render( scene, camera );\n    });\n    // run the rendering loop\n    let lastTimeMsec = null;\n    requestAnimationFrame(function animate(nowMsec) {\n      // keep looping\n      requestAnimationFrame( animate );\n      // measure time\n      lastTimeMsec\t= lastTimeMsec || nowMsec - 1000 / 60;\n      let deltaMsec\t= Math.min(200, nowMsec - lastTimeMsec);\n      lastTimeMsec\t= nowMsec;\n      // call each update function\n      onRenderFcts.forEach(function(onRenderFct) {\n        onRenderFct(deltaMsec / 1000, nowMsec / 1000);\n      });\n    });\n\n\n  }\n\n}\n","<!-- include A-Frame obviously -->\r\n<script src=\"https://aframe.io/releases/0.6.0/aframe.min.js\"></script>\r\n<!-- include ar.js for A-Frame -->\r\n<script src=\"https://jeromeetienne.github.io/AR.js/aframe/build/aframe-ar.js\"></script>\r\n\r\n\r\n<body style='margin : 0px; overflow: hidden;'>\r\n  <a-scene embedded arjs>\r\n    <a-assets>\r\n        <a-asset-item id=\"animated-asset\" src=\"https://raw.githubusercontent.com/HabibDaou/HabibDaou.github.io/master/scene.gltf\"></a-asset-item>\r\n        <video crossorigin=\"anonymous\" id=\"BS0i6\" controls=\"true\"  loop=\"true\" type=\"video/mp4\" src=\"https://raw.githubusercontent.com/HabibDaou/HabibDaou.github.io/master/IKEAPlace.mp4\"> </video> \r\n    \r\n    </a-assets>\r\n    \r\n    <!-- create your content here. just a box for now -->\r\n    <a-box position='0 0.5 0' material='opacity: 0.5;'></a-box>\r\n    <!-- define a camera which will move according to the marker position -->\r\n    <a-marker-camera preset='hiro'></a-marker-camera>\r\n  </a-scene>\r\n  \r\n<script>\r\n    window.addEventListener('click', function () {\r\n    var v = document.querySelector('#BS0i6');\r\n    v.play();\r\n    });\r\n</script>\r\n</body>\r\n\r\n  ","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AnimateImageRoutingModule } from './animate-image-routing.module';\nimport { AnimateImageComponent } from './animate-image.component';\nimport {CUSTOM_ELEMENTS_SCHEMA} from '@angular/core';\nimport { DropzoneConfigInterface, DropzoneModule, DROPZONE_CONFIG } from 'ngx-dropzone-wrapper';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport { ShowAnimationComponent } from './show-animation/show-animation.component';\n\n\nconst DEFAULT_DROPZONE_CONFIG: DropzoneConfigInterface = {\n  maxFilesize: 50,\n  url: 'https://httpbin.org/post',\n};\n\n@NgModule({\n  declarations: [AnimateImageComponent, ShowAnimationComponent],\n  imports: [\n    CommonModule,\n    AnimateImageRoutingModule,\n    DropzoneModule,\n    DragDropModule\n    \n  ],\n  schemas: [ CUSTOM_ELEMENTS_SCHEMA ],\n  providers:[{ provide: DROPZONE_CONFIG,\n    useValue: DEFAULT_DROPZONE_CONFIG},\n    NgbActiveModal]\n})\nexport class AnimateImageModule { }\n","import { AfterViewInit, Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { DropzoneConfigInterface } from 'ngx-dropzone-wrapper';\nimport {CdkDragDrop, moveItemInArray, transferArrayItem, CdkDrag} from '@angular/cdk/drag-drop';\n\n@Component({\n  selector: 'app-animate-image',\n  templateUrl: './animate-image.component.html',\n  styleUrls: ['./animate-image.component.scss']\n})\nexport class AnimateImageComponent implements  OnInit {\n  items = [\n    'Carrots',\n    'Tomatoes',\n    'Onions',\n    'Apples',\n    'Avocados'\n  ];\n\n  basket = [\n  ];\n\n  drop(event: CdkDragDrop<string[]>) {\n    if (event.previousContainer === event.container) {\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n    } else {\n      transferArrayItem(event.previousContainer.data,\n                        event.container.data,\n                        event.previousIndex,\n                        event.currentIndex);\n    }\n  }\n  public onUploadInit(args: any): void { }\n  \n  public onUploadError(args: any): void { }\n  \n  public onUploadSuccess(args: any): void {\n\n    var container = document.querySelector('#imageContainer')\n    var fullMarkerImage = document.createElement('img')\n\tfullMarkerImage.src = args[0].dataURL;\n\n\twhile (container.firstChild) container.removeChild(container.firstChild);\n\tcontainer.appendChild(fullMarkerImage)\n  }\n\n  public markeronUploadInit(args: any): void { }\n  \n  public markeronUploadError(args: any): void { }\n  \n  public markeronUploadSuccess(args: any): void {}\n  public config1: DropzoneConfigInterface = {\n    clickable: true,\n    maxFiles: 1,\n    autoReset: null,\n    errorReset: null,\n    cancelReset: null\n  };\n   \n  \nngOnInit(){\n\n}\n}\n","    <label class=\"col-form-label pt-0\"> Profile photo Upload</label>\r\n    <div class=\"card-body dropzone-custom p-0\">\r\n        <div class=\"dropzone dropzone-primary\" [dropzone]=\"config1\" (error)=\"onUploadError($event)\"\r\n            (success)=\"onUploadSuccess($event)\">\r\n            <div class=\"dz-message needsclick\">\r\n                <i class=\"fa fa-cloud-upload\"></i>\r\n                <h4 class=\"mb-0 f-w-600\">Change your photo</h4>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\" dropzone-custom\">\r\n      <div class=\"dropzone dropzone-primary\" [dropzone]=\"config1\" (error)=\"markeronUploadError($event)\"\r\n        (success)=\"markeronUploadSuccess($event)\">\r\n        <div class=\"dz-message needsclick\">\r\n          <i class=\"fa fa-cloud-upload\"></i>\r\n          <h4 class=\"mb-0 f-w-600\">Upload your Marker</h4>\r\n        </div>\r\n      </div>\r\n    </div>\r\n \r\n\r\n\r\n\r\n\r\n  <div cdkDropListGroup>\r\n    <div class=\"example-container\">\r\n      <h2>Available Animations</h2>\r\n\r\n      <div\r\n        cdkDropList\r\n        [cdkDropListData]=\"items\"\r\n      \r\n        cdkDropListSortingDisabled\r\n        (cdkDropListDropped)=\"drop($event)\">\r\n        <div class=\"example-box\" *ngFor=\"let item of items\" cdkDrag>{{item}}</div>\r\n      </div>\r\n    </div>\r\n\r\n    <div id=\"imageContainer\"class=\"example-container2\"  > </div>\r\n    <div id=\"tui-image-editor\"></div>\r\n\r\n    <div class=\"example-container\">\r\n      <h2>Actions</h2>\r\n      <div\r\n        cdkDropList\r\n        [cdkDropListData]=\"basket\"\r\n        class=\"example-list\"\r\n        (cdkDropListDropped)=\"drop($event)\">\r\n        <div class=\"example-box\" *ngFor=\"let item of basket\" cdkDrag>{{item}}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n<button [routerLink]=\"'/animate/show'\"> Go To show </button>"]}